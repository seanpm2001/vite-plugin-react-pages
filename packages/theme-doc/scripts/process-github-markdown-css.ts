import postcss from 'postcss'
import fs from 'fs-extra'
import parser from 'postcss-selector-parser'
import { createRequire } from 'node:module'

const require = createRequire(import.meta.url)
const cssPath = require.resolve('github-markdown-css/github-markdown-light.css')

const css = fs.readFileSync(cssPath, 'utf-8')

// github-markdown-css normally applies to .markdown-body and ALL its descendants.
// But user custom components and demo component may also be rendered inside .markdown-body. We don't want github-markdown-css affects them.
// So we use this script to preprocess github-markdown-css to make it apply to "markdown element", for example "p" or "ul".

postcss([
  {
    postcssPlugin: 'postcss-github-markdown-css',
    Rule(rule, helper) {
      parser((selectors) => {
        selectors.each((selector) => {
          const first = selector.first
          const second = first.next()
          if (
            first.type === 'class' &&
            first.value === 'markdown-body' &&
            second?.type === 'combinator' &&
            second.value === ' '
          ) {
            // apply the rule to .markdown-el, as well as descendants of it
            // replace .markdown-body xxxx yyyy
            // with xxxx:is(.markdown-el, .markdown-el *) yyyy
            const groups = selector.split((selector) => {
              return selector.type === 'combinator'
            })
            // debugger
            // remove the ".markdown-body " part
            groups.shift()

            // now the groups[0] is the "xxxx " part

            // add the :is(.markdown-el, .markdown-el *) part
            const newNode = parser.pseudo({
              value: ':is(.markdown-el, .markdown-el *)',
            })

            if (lastItemOf(groups[0])?.type === 'combinator') {
              groups[0].splice(groups[0].length - 1, 0, newNode)
            } else {
              groups[0].push(newNode)
            }

            selector.nodes = groups.flat()
          }
        })
      }).processSync(rule, { updateSelector: true })
    },
  },
])
  .process(css, { from: 'github-markdown-light.css', to: 'out.css' })
  .then((result) => {
    fs.writeFileSync(
      new URL('../src/Layout/github-markdown-light.css', import.meta.url),
      `/* This file is generated by ../../scripts/process-github-markdown-css.ts. Don't Edit this file directly. */\n` +
        result.css
    )
  })

function lastItemOf<T>(array: T[]): T | undefined {
  return array[array.length - 1]
}
